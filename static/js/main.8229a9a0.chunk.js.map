{"version":3,"sources":["images/networking_layers.jpg","images/stack.jpg","images/app_auth_flow.jpg","images/xor_addresses.jpg","images/vaults_journey.jpg","images/proof_of_resource.jpg","images/resources_and_currency.jpg","images/data_types.png","images/xor_url.PNG","images/api_flow_revised.PNG","pages/Intro.js","pages/Chap1.js","pages/Chap2.js","pages/Chap3.js","pages/Chap4.js","pages/Chap5.js","pages/Chap6.js","pages/Chap7.js","pages/Chap8.js","pages/Chap9.js","pages/Chap10.js","pages/Chap11.js","pages/Chap12.js","pages/Chap13.js","Header.js","Topbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","component","react_default","a","createElement","className","id","bgcol","height","href","align","src","networking_layers","alt","stack","app_auth_flow","width","Chap4","xor_addresses","Chap5","vaults_journey","title","Chap6","class","target","rel","Chap7","proof_of_resource","resources_and_currency","data_types","api_flow_revised","xor_url","prop","Topbar","props","style","backgroundColor","App","Header","Intro","src_Topbar","word","Chap1","Chap2","Chap3","pages_Chap4","pages_Chap5","pages_Chap6","pages_Chap7","Chap8","Chap9","Chap10","Chap11","Chap12","Chap13","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8229a9a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/networking_layers.3071f5e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/stack.6a1c4e80.jpg\";","module.exports = __webpack_public_path__ + \"static/media/app_auth_flow.a643ebb8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/xor_addresses.012600c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vaults_journey.e48595ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/proof_of_resource.835f0e5c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resources_and_currency.10156824.jpg\";","module.exports = __webpack_public_path__ + \"static/media/data_types.f92f7295.png\";","module.exports = __webpack_public_path__ + \"static/media/xor_url.dc6c58cb.PNG\";","module.exports = __webpack_public_path__ + \"static/media/api_flow_revised.4c5d58d2.PNG\";","import React from 'react';\r\n\r\nconst component = () => (\r\n    <div className='intro'>\r\n        <h2 id='ch9'>A brief introduction</h2>\r\n  \r\n        <p>Technological progress is a perpetual process of automation and abstraction. Difficult and complex tasks are made simple by software and machines until they are completely taken for granted. Technology moves on, taking down new blockers in the path to progress as it goes. A good example of this is cloud computing, where once complex server administration tasks have been replaced, from the point of view of the consumer, by point-and-click.</p>\r\n        <p>The SAFE (Secure Access For Everyone) Network takes this further, automating the entire network of interconnected machines, making it autonomous, secure, anonymous and capable of&nbsp; storing, protecting and delivering data without any human involvement at all.</p>\r\n        <p>The SAFE Network is the vision of MaidSafe, a Scottish software company working in the field of decentralized computer networking. It is an autonomous peer-to-peer network created by linking together users' computers and smartphones that's designed to solve many of the current technical, managerial and societal problems with centralized networks: a lack of privacy and data security, censorship and the massive consolidation of control by a few powerful actors.&nbsp;</p>\r\n        <p>(In case this sounds familiar, members of MaidSafe acted as advisers for HBO&rsquo;s Silicon Valley TV series in which a startup tries to reinvent the Internet!)</p>\r\n        <p>The Network is &lsquo;trustless&rsquo;, with no central point of control and no single point of failure. With connectivity and security taken care of, the Network is simple from the point of view of developers, with no need to worry about low-level storage, networking, backups and computing resources. For people using the Network to store and share data and messages the burden of ensuring the security of precious information would be drastically reduced.</p>\r\n        <p>Anyone with a connected device can join the network anonymously (subject to a resource test) as a provider, and anyone can use the network to store data or peruse public information on it. The Network is thus a platform on which new digital worlds can be constructed.</p>\r\n        <p>This guide outlines how the SAFE Network is constructed to achieve these aims. While it is somewhat technical in places, it's intended very much as an overview, and even those with very little technical knowledge should be able to gain a good working understanding of the SAFE Network. For those requiring more depth, there are plenty of pointers as to where they can find the relevant information.</p>\r\n        <p>This update to the Primer (October 2019) covers the consensus algorithm PARSEC, ways in which the Network defends itself against common forms of attack, the new AppendOnly data type and the introduction of the quic-p2p routing library which replaces Crust.</p>\r\n      \r\n        \r\n        <div bgcol=\"#1f3a60\" height=\"10px\"></div>\r\n        <h2>Contents</h2>\r\n        <p><br /><a href='#ch1'>1. Background and fundamentals</a>\r\n            <br /><a href='#ch2'>2. A fully autonomous data network</a>\r\n            <br /><a href='#ch3'>3. Vaults and Clients</a>\r\n            <br /><a href='#ch4'>4. The architecture of the SAFE Network</a>\r\n            <br /><a href='#ch5'>5. Node Age</a>\r\n            <br /><a href='#ch6'>6. Everything's encrypted</a>\r\n            <br /><a href='#ch7'>7. PARSEC consensus algorithm</a>\r\n            <br /><a href='#ch6'>8. Farming for Safecoin</a>\r\n            <br /><a href='#ch9'>9. Vault personas</a>\r\n            <br /><a href='#ch10'>10. Data types</a>\r\n            <br /><a href='#ch11'>11. The SAFE API</a>\r\n            <br /><a href='#ch12'>12. How SAFE Network defends against common types of cyberattack</a>\r\n            <br /><a href='#ch13'>13. The promise of the SAFE Network</a>\r\n        </p>\r\n                            \r\n\r\n    </div>\r\n);\r\n\r\nexport default component;","import React from 'react';\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'> \r\n\r\n\r\n\r\n    \r\n        <h2 id='ch1'>1.&nbsp;&nbsp; Background and fundamentals</h2>\r\n\r\n        <h3><br /> Background</h3>\r\n      \r\n        <p><br /> Decentralized or peer-to-peer (P2P) networks are not new. Since the release of Napster on June 1, 1999, they have taken the world by storm, particularly for file sharing. These networks allow users from all over the world to connect to each other and share data such as movies, books and music. In 2010 more than half of all Internet traffic was attributed to P2P.<br /> <br /> But the use of these technologies is not limited to simple file sharing. Freenet was launched in March, 2000 allowing people to publish decentralized websites (Freesites). Freesites are not stored on central servers but instead are distributed across the machines of the encrypted network's users.<br /> <br /> A little after that, the BitTorrent protocol was created by Bram Cohen. BitTorrent was and still is particularly well suited to transferring large files in a P2P fashion, allowing simultaneous downloads from multiple peers.<br /> <br /> The next notable development arrived after the financial crash which very nearly brought the global economy to its knees. In 2009 Satoshi Nakamoto released Bitcoin and gave the world a 'trustless' decentralized digital currency that is not controlled by bank, government or institution. The blockchain - the immutable ledger that records all Bitcoin transactions - was something very new, solving at a stroke the difficult and long-standing problem of creating a trustless source of the truth for transactions.&nbsp; The ownership of 'addresses' in the network can be proven by the usage of private keys in a Public Key Infrastructure (PKI) - hence the term cryptocurrency - although connections between Bitcoin nodes are not fully encrypted.<br /> <br /> The SAFE Network is the next big step in the evolution of P2P networks, combining the vision of decentralized file sharing and decentralized web sites together with an internal cryptocurrency - Safecoin - and several additional innovations to enhance security, privacy, performance and stability. MaidSafe (a company based in Ayr, Scotland) has been researching and developing this project since 2006.&nbsp; Since that time, many more people and projects have come to recognize the vital importance of a global, secure and private decentralized platform for storage and communication.<br /> </p>\r\n\r\n        <h3>20 Fundamental Principles of the SAFE Network</h3>\r\n\r\n        <p> There are a number of core ideas that have driven each stage of the design of the SAFE Network. These can be distilled into the following 20 fundamental principles.</p>\r\n\r\n            <p>The SAFE Network will:</p>\r\n                <ol> <li>Allow a person to create an account and login anonymously and without intervention. <br /> Creating a new account and logging into the Network will never require a third party.</li>\r\n                  <li>Enable users to securely and with no controlling intermediaries share information and messages.<br />The SAFE Network will never allow third parties to either read or store the information sent by a user without that user&rsquo;s consent.</li>\r\n                 <li>Allow the transfer of the Network currency Safecoin to any user free of transaction costs.</li>\r\n                 <li>Enable Users to anonymously create and share data worldwide. &nbsp;&nbsp; The Network will always ensure that the user has the ability to send transaction messages and posts with a temporary single-use ID that is not linked to any known identity on the Network.</li> \r\n                <li>Let anyone browse content anonymously and free of charge and without the need to create an account.</li>\r\n                <li>Allow users to associate multiple identities with their account.</li>\r\n                <li>Let users utilize any of their identities to send/receive Safecoin.</li>\r\n                <li>Store data in perpetuity. All public/published data on the Network will be immutable and available on the Network indefinitely.</li>\r\n                <li>Never require passwords to be stored on the Network or on machines used to access the Network.</li>\r\n                <li>Allow any user, on any machine, to access the Network leaving no trace of their presence or activity on the machine.</li>\r\n                <li>Scrub Client IP addresses from the first hop. <br />As soon as you have connected to the network, your IP address is wiped.</li>\r\n                <li>Only accept more Vaults (networked storage provided by users' machines) when it needs them. <br /> This is to prevent a bad actor from flooding the network with poorly performing or malicious Vaults and also to enable the Network to balance its resources automatically according to demand.</li>\r\n                <li>Increase farming rewards when it needs more resources (e.g. more Vaults to increase storage capacity) and decrease rewards when resources are plentiful. <br />This is the primary mechanism for balancing supply and demand.</li>\r\n                <li>Rank nodes over time and increase trust in higher ranked nodes.<br />The aim is to maximize performance and defend against certain attacks.</li>\r\n                <li>Not have servers! <br />The SAFE Network will never rely on servers (as the term is traditionally understood) as to do so introduces a third-party weakness that undermines the entire Network.</li>\r\n                <li>Digitally sign all transactions. <br />To ensure that the transactions have been authorized in accordance with the rules of the Network.</li>\r\n                <li>Ensure that Client-to-Client direct messages (i.e. those not transmitted via other nodes in the Network) are free.</li>\r\n                <li>Never use time as a network tool. <br /> There can be no concept of time in a truly decentralized network without reaching out to centralized servers and services.</li>\r\n                <li>Only use encrypted services and encrypted traffic.</li>\r\n                <li>Allow real-time upgrades in a secure manner. <br />The Network will refuse upgrades that could break it.</li> </ol>\r\n\r\n            <p>We expand on these fundamental principles in the chapters that follow. Combined they aim to give all users the freedom to safely store data on the Network, to share information with others securely, to publish websites cheaply and easily and to communicate using secure channels and apps.</p>\r\n\r\n\r\n        <p>For a fuller version of this list see the SAFE Network website. <a href=\"https://safenetwork.tech/fundamentals/\">https://safenetwork.tech/fundamentals/</a></p>\r\n\r\n\r\n        \r\n    </div>\r\n\r\n);\r\n\r\nexport default component;","import React from 'react';\r\nimport networking_layers from '../images/networking_layers.jpg';\r\nimport stack from '../images/stack.jpg';\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n\r\n\r\n    \r\n<h2 id='ch2'>2. A fully autonomous data network</h2>\r\n\r\n     \r\n\r\n        <p>To enable Secure Access For Everyone, SAFE is an &lsquo;autonomous data network&rsquo;. This means it is capable of networking and storage tasks like managing and optimizing workloads, routing, failover, authentication, access control and others without any human intervention. Opportunities for powerful groups to aggregate control or forbid access are minimized.</p>\r\n\r\n       \r\n\r\n        <p>SAFE infrastructure is not defined by a set of federated servers, VMs, owned storage locations or identifiable nodes - unlike the current Internet. Unlike blockchains, it is designed to store and manage live data rather than pointers to data and to transact in real-time. And unlike BitTorrent, it does not rely on centralized components of the Web to locate and track files.</p>\r\n\r\n   \r\n\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img\" src={networking_layers} alt=\"Networking layers\" align=\"center\" />\r\n        </div>\r\n\r\n        \r\n\r\n   \r\n\r\n        <p>Many features in the SAFE Network are innovations, but there is no intention to reinvent the wheel. It builds on existing decentralized technologies such as BitTorrent and Kademlia and is based on the physical and data infrastructure of the Internet. Early development of SAFE happened in parallel with blockchain, so it has taken an alternative route to solve the decentralization puzzle.</p>\r\n\r\n        <p>The SAFE Network can be seen as a secure, encrypted, intelligent layer that sits on top of the current Internet, complementing the top three layers in the OSI model and adding resources in the application layer. This enables secure, anonymous, decentralized data storage and networking.</p>\r\n\r\n        <p>Going a little deeper, SAFE introduces some changes to the networking and application layers as shown below.</p>\r\n\r\n    \r\n\r\n        <p>The SAFE Network core libraries are written in the Rust programming language. The diagram below shows the basic hierarchy.</p>\r\n\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img\" src={stack} alt=\"Stack\"  align=\"center\" />\r\n        </div>\r\n\r\n         \r\n \r\n\r\n        <h3>quic-p2p</h3>\r\n\r\n        <p>quic-p2p is based on the QUIC protocol created at Google. It is a networking library that enables peers on a P2P network to communicate securely, and to re-join the network without requiring a hard-coded list of known peers; such a list would be an obvious security hole. It supports multiple protocols allowing ordinary PCs and smartphones to connect to each other and is cryptographically secure. quic-p2p supercedes the Crust library.</p>\r\n\r\n        <h3>Routing</h3>\r\n\r\n        <p>On top of quic-p2p sits Routing. This is the overlay networking and routing layer which forms the &lsquo;brain&rsquo; of the SAFE Network. Its purpose is to form a decentralized Internet and route information within it.</p>\r\n\r\n        <p>Routing is based on an algorithm that extends Kademlia DHT routing (see Chapter 4). It uses 32-byte (256 bit) XOR addresses to locate data on the network. It is mathematically guaranteed that messages can be routed from any part of the network to any other destination.</p>\r\n\r\n        <p>Routing works purely on the terms of Group Consensus (see Chapter 4). We don&rsquo;t trust a single entity, only a group decision with eventual consistency. In order to come to this eventual consistency, the routing layer uses the consensus mechanism PARSEC (See Chapter 7).</p>\r\n\r\n        <p>Vaults and Clients provide the main means for users to interact with the Network, either by providing resources in return for payment by running a Vault or by storing data and browsing the SAFE web using hte Client. They are discussed further in the next chapter.</p>\r\n\r\n        <p>All SAFE Network code is open source.</p>\r\n\r\n       <h3>Tell me more&hellip;</h3>\r\n\r\n        <p><a href=\"https://hub.safedev.org/core_technology/\"> Core Technology (SAFE Network DevHub)</a></p>\r\n\r\n        <p><a href=\"https://github.com/maidsafe/rfcs/blob/master/text/0043-async-safe-core/0043-async-safe-core.md\"> SAFE core API (Github)</a></p>\r\n\t\t\r\n\t\t  <p><a href=\"https://github.com/maidsafe/quic-p2p\"> quic-p2p - a peer-to-peer communications library for Rust based on QUIC protocol (Github)</a></p>\r\n\r\n\r\n    <p><a href=\"https://docs.rs/quinn/0.2.0/quinn/\"> Quinn - QUIC protocol in Rust</a></p>\r\n\r\n        <p>&nbsp;</p>\r\n\r\n     \r\n      \r\n        \r\n                \r\n    </div>\r\n\r\n);\r\n\r\nexport default component;","import React from 'react';\r\nimport app_auth_flow from '../images/app_auth_flow.jpg';\r\n\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n\r\n    \r\n        <h2 id='ch3'>3. Vaults and Clients</h2>\r\n\r\n\r\n\r\n        <p>The existing Internet is formed of servers and clients. Clients request data and servers provide it. When you browse the Web, you enter the address of the page into the browser (client software) and the browser requests data from the website in question which is stored on a specific server (server software).</p>\r\n\r\n        <p>The SAFE Network does not use a client-server model. Instead the data resides across a network made up from the spare computing resources of its users. When a request for data is made, a message goes out across the network and machines that hold the chunks that make up the required data returns them to the requester.</p>\r\n\r\n        <p>SAFE has two basic components: Vaults and Clients.</p>\r\n\r\n        <div className=\"Keep-it-simple\">\r\n\r\n        <h3>Keep it simple!</h3>\r\n\r\n            <p>The SAFE Network is comprised of its users' machines (nodes) linked together by Vault software which routes data and messages securely between them. These machines provide the Network's storage by allocating a portion of their hard drives for this purpose &ndash; and earning the Safecoin currency in return. However, you don't have to run a Vault to use the Network any more than you have to run a web server to use the Web. Client software allows users to login, store data and browse the SAFE web securely and anonymously without being part of the Network. A computer can run both Vault and Client software at the same time.&nbsp;&nbsp; </p>\r\n        </div>\r\n\r\n\r\n\r\n        <h3>The Vault</h3>\r\n\r\n        <p>The SAFE Network is formed of interconnected machines (nodes) running Vault software. Vault software connects the devices to each other using existing protocols like TCP and UDP, manages data and routes it around the Network. It allows users to store data on their devices, potentially earning Safecoin currency in return. This process of providing a service in return for a reward is analogous to Bitcoin mining. On the SAFE Network it's called Farming and the people who provide the resources are called Farmers (see Chapter 8).</p>\r\n\r\n        <p>Vault software is a small executable file that connects the user&rsquo;s machine to the SAFE Network, turning it into a routing node and also allocating some disk space for storage. It manages the storage of data chunks on the user&rsquo;s computer and in that way provides storage capacity to the Network. It also routes and caches data chunks (these are encrypted if data is private) over the Network making use of fully encrypted connections to other Vaults. Vaults are clustered logically into small groups, each of which is responsible for looking after the data stored within a certain range of network addresses, called a Section (see Chapter 4).</p>\r\n\r\n        <div className=\"What-does-that-mean\">\r\n        <h3>What does that mean?</h3>\r\n\r\n        <p>quic-p2p &ndash; a software library that allows machines to connect to each other in a secure and reliable peer-to-peer fashion and to reconnect after leaving without requiring a hard-coded list of other devices.</p>\r\n\r\n        <p>Vault &ndash; the machines (nodes) that make up the SAFE Network run Vault software. In this Primer we use the words Vault and node interchangeably. Vaults provide routing and communications capabilities to the Network and also store data in the form of chunks, for which they can earn Safecoin (Farming) when that data is retrieved.</p>\r\n\r\n        <p>Client &ndash; a program that allows users to connect to the network and make use of its services. At the present time this is incorporated into the SAFE Browser.</p>\r\n\r\n        <p>SAFE Browser &ndash; a browser for surfing the SAFE web.</p>\r\n\r\n        <p>Authenticator - enables users to create an account and login without going via a server (Self-Authentication) and also to approve or deny access to their data by apps.</p>\r\n\r\n        <p>Self-Authentication - a feature that enables a user to create an account and log into the decentralized Network securely and anonymously without any central server to mediate the login process.</p>\r\n\r\n        <p>Farming &ndash; earning Safecoin by providing resources (Storage, Bandwidth, CPU, online time) to the Network</p>\r\n\r\n        <p>Safecoin &ndash; the currency of the SAFE Network, earned by storing data, spent by uploading data.</p>\r\n\r\n        </div>\r\n\r\n        <p>The forming, merging and splitting of Sections happens in a fully autonomous way as computers join and leave the Network. The same goes for the routing of chunks across the Network. There are no central servers or agents needed to form this Network (unlike, say, like BitTorrent which uses trackers). Instead, the Vaults follow a set of strict rules to create and maintain the Network, requiring no central authority to do so.</p>\r\n\r\n        <p>Vaults have several different functions to fulfil. They route and store chunks of data; they cryptographically check messages; they cluster into collections of nodes that will manage certain Sections of the Network; they make decisions about what should and should not happen, such as whether a new Vault should be allowed to join the Network. These responsibilities are divided between two separate &lsquo;personas&rsquo; the Client Manager and the Data Manager (See Chapter 9).</p>\r\n\r\n        <p>Running a Vault in the SAFE Network is called Farming because users look after the data until it is needed, at which point they may earn payment for their efforts (see Chapter 8).</p>\r\n\r\n        <h3>The Client</h3>\r\n\r\n        <p>Just as you don&rsquo;t need to run a web server to use the Web, you don&rsquo;t have to run a Vault to access the SAFE Network. Ordinary users interact with the network via the Client. Currently the Client is comprised of the SAFE Browser, the Authenticator, and, optionally, a command line interface (CLI) tool. The Authenticator is bundled with the Browser and is also available as a standalone application. The Browser and Authenticator support Windows, OSX, Linux, Android and iOS, whereas the SAFE CLI supports Windows, OSX and Linux.</p>\r\n\r\n        <p>Self-Authentication is a key innovation of the Network. At no point does the Network ever store a user&rsquo;s password. Therefore, there is no chance of that password being attacked on the Network. Instead, the Authenticator allows a user to create an account and log into a decentralized network securely and anonymously without requiring any central server to mediate the login process, or any trusted third party to store and manage users&rsquo; credentials. With Self-Authentication, the user generates his or her own credentials which are stored on the SAFE Network in such a way that they are cryptographically obfuscated from all other parts of the Network.</p>\r\n\r\n        <p>Because users control their own data, Decentralized Applications (DApps) such as the SAFE Browser, require the user to authorize them to manipulate their data. For the user, the authorization process is simply a matter of clicking a button.</p>\r\n\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img\" src={app_auth_flow} alt=\"App auth flow\" width=\"70%\" align=\"center\" />\r\n        </div>\r\n\r\n\r\n        \r\n        <p>Any user (even if they&rsquo;re not logged in) can request (GET) data from the network for free. For example, they can browse a safe:// site or download a publicly-posted song or movie for zero cost. It&rsquo;s only when the user wants to store (PUT) data onto the network that an account with Safecoin is needed.</p>\r\n        <h3>Tell me more...</h3>\r\n        <p><a href=\"http://www.enterprisenetworkingplanet.com/datacenter/datacenter-blog/on-the-verge-of-autonomous-networking.html\">On the Verge of Autonomous Networking (Enterprise Networking Planet)</a></p>\r\n        <p><a href=\"http://docs.maidsafe.net/Whitepapers/pdf/AutonomousNetwork.pdf\">Autonomous Network (MaidSafe whitepaper)</a></p>\r\n        <p><a href=\"https://github.com/maidsafe/safe_vault\">An Implementation of a SAFE Network Vault (Github)</a></p>\r\n        <p><a href=\"https://github.com/maidsafe/safe_client_libs\">SAFE Client libraries (Github)</a></p>\r\n        <p><a href=\"https://github.com/maidsafe/safe_browser\">SAFE Browser (Github)</a></p>\r\n\t\t<p><a href=\"https://github.com/maidsafe/safe_browser\">SAFE Mobile Browser (Github)</a></p>\r\n        <p><a href=\"https://github.com/maidsafe/safe-cli\">SAFE CLI -  a CLI (Command Line Interface) for the SAFE Network (Github)</a></p>\r\n\t\t<p><a href=\"https://github.com/maidsafe/safe_client_libs/tree/master/safe_authenticator\">SAFE Authenticator library for interfacing with Authenticator frontend (Github)</a></p>\r\n\t\t<p><a href=\"https://github.com/maidsafe/safe-authenticator-cli\">SAFE Authenticator CLI(Github)</a></p>\r\n\t\t\r\n       \r\n    </div>\r\n\r\n);\r\n\r\nexport default component;","import React from 'react';\r\nimport xor_addresses from '../images/xor_addresses.jpg';\r\n\r\n\r\n\r\nconst Chap4 = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch4'>4. The architecture of the SAFE Network</h2>\r\n\r\n        <p>Browsing sites and storing data on the SAFE Network is just as simple as on the current Web but with greatly enhanced privacy, security and control. The SAFE Network is designed with ease of use in mind for app developers, too. Developing simple apps for SAFE is just a short step from what developers are familiar with in terms of APIs and methodologies. However, those wishing to perform more complex systems-level tasks will need to go deeper into its architecture - there are some big differences between traditional client-server systems and decentralized architectures. This chapter provides a brief introduction to the topic.</p>\r\n        <h3>Sections</h3>\r\n        <p>The first step in understanding the architecture of the SAFE Network is to take a look at distributed hash tables (DHTs).</p>\r\n        <p>Petar Maymounkov and David Mazi&egrave;res released the Kademlia distributed hash table in 2002. The idea is that nodes form a network overlay, and are identified with a different node identification system. So a node (in this case a Vault) could have an IP address of 96.251.182.97 while it uses 17846cb8a4b53c9e44c616d2415a15984283eee975a1dac8f488dd91d0aed1cd as a unique 256-bit address in XOR space.</p>\r\n        <p>Bitwise Exclusive OR (XOR) has the feature that each address is a unique distance from any other address in the entire address range. XOR distance bears no relation to physical distance. Indeed, two pieces of data on the network may be very close XOR-wise but be sitting on machines located on opposite sides of the world.</p>\r\n        <p>MaidSafe developed an enhancement to Kademlia by splitting the 256-bit address range into so-called 'Disjoint Sections', or Sections for short. A 256-bit address space has 2<sup>256</sup> -1 possible addresses which is an extremely large number to manage, but it can be split up into smaller Sections based on address, with each Section being managed by a group of nodes.</p>\r\n        <p>The nodes managing a Section will always try to reach consensus (agreement) amongst themselves on any Network event happening within that Disjoint Section. They also &lsquo;group sign&rsquo; messages that travel over the wider Network so that other nodes and/or Sections can cryptographically verify the validity of each message and action (such as groups forming, splitting and merging). These group signatures are stored in &lsquo;Data Chains&rsquo; which are secured and held by members of that Section, and by neighbouring Sections, for the life of each session. This is known as Group Consensus.</p>\r\n        <div className=\"What-does-that-mean\">\r\n        <h3>What does that mean?</h3>\r\n        <p>Distributed hash table &ndash; a map of where data is stored on a distributed network.</p>\r\n        <p>XOR networking &ndash; a way of randomizing the physical location of data on a distributed network and ensuring each location is unique.</p>\r\n        <p>Section &ndash; a subset of the addresses on the network. </p>\r\n        <p>Group - Data is stored by a fixed-size Group of nodes that is closest (in XOR terms) to the address of the data</p>\r\n        <p>Group Consensus - when the minimum number of nodes in a Group agree on an order of events occurring on the network. Group Consensus is achieved using the PARSEC algorithm (Chapter 7).</p>\r\n        <p>group_size &ndash; a parameter stipulating the minimum number of nodes that can look after a Section.</p>\r\n        <p>Bootstrapping &ndash; starting up the SAFE Network by connecting together a minimum number of nodes. Bootstrapping is also used to describe a new node (Vault) joining the Network.</p>\r\n        <p>Bootstrap node &ndash; a node to which a new node (Vault) initially connects (via a proxy). Any node can potentially be a bootstrap node, so long as its IP address is written in the Vault&rsquo;s configuration file. </p>\r\n        <p>Hash function &ndash; a function used to map data of arbitrary size to data of fixed size (e.g. a 256-bit string of characters) called a hash. Any change to the original data will result in a completely different hash. SAFE uses the SHA-3 hash function.</p>\r\n        <p>Data Chain &ndash; A record of action, decisions and activity within a Section and its neighbours. It stores Section Info, Proofs and Neighbour Info for the purposes of relaying it to other Sections.</p>\r\n        <p>Sharding &ndash; on SAFE Network this refers to the splitting of the Network into individual sections, each managed by a unique Group of nodes (Vaults).</p>\r\n        </div>\r\n         <p>Importantly, on joining or rejoining the SAFE Network a node cannot simply pick its own XOR address - in other words, it can&rsquo;t pick the Section it will be part of. Instead, it has to wait to be allocated to a Section that is chosen by the Network. When this occurs, the node receives the Section's Routing Table and learns the exact unique address range (and therefore the data) that it will be responsible for.</p>\r\n        <p>Data stored on the SAFE Network is first broken into chunks, hashed and then encrypted (see Chapter 6). Those chunks are run through a hashing algorithm to create a unique 256-bit hash for each chunk. Only chunks that are exactly identical will have the same hash value. This hash serves as the XOR address on the Network where that chunk will be stored, which in turn determines the Group that will manage it.</p>\r\n        <p>Chunks with hashes that lie within a certain address range (say 000010... to 000011...) will be secured, stored and managed by a Group of Vaults that is closest (in XOR terms) to that location. The membership of this Group will change over time as new Vaults join and others leave.</p>\r\n        <p>When the Network starts up, the initial nodes will be responsible for the whole 256-bit address range. But as more nodes join the Network will split and form new Sections. As stillmore nodes join, the Sections will continue to split, creating standalone Disjoint Sections running individual consensus algorithms, with votes taken only by the Elders within them. This is known as &lsquo;Sharding&rsquo; and is a crucial part of the way in which the Network solves the challenges of scalability.</p>\r\n  \r\n        <p className=\"Pullquote\">\"The hash of a chunk of data serves as the XOR address on the Network where it will be stored, which in turn determines the Group of nodes that will manage it\"</p>\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img\" src={xor_addresses} alt=\"Networking layers\" width=\"70%\" align=\"center\" />\r\n        </div>\r\n     \r\n  \r\n        <p>If the Group of nodes that manage a particular Section grows significantly in the eyes of the Network, it will split into two with each new Group managing a smaller Section (range of addresses). Likewise, when nodes leave the Network, if the number of nodes drops below a certain threshold level (specified by a parameter called group_size), the reduced size will act as a trigger for that Section to attempt to merge with a Sibling Section. Experiments are ongoing to find the optimum group size, but it will probably be around 100.</p>\r\n  \r\n        <h3>Consensus and quorum</h3>\r\n        <p>The nodes (Vaults) managing a Section will always try to reach consensus among themselves on network events. They also &lsquo;group sign&rsquo; messages that travel over the wider network so other nodes in other Sections can cryptographically verify the validity of each message and action. These group signatures are stored in containers called Data Chains which are secured and held by all Vaults in the group. All events such as forming, splitting and merging Sections are recorded and stored in this way.</p>\r\n  \r\n        <p>Any new node joining the Section can read the Data Chain. Sections also share some information about events and current state with other Sections that are close to them.</p>\r\n        <div className=\"Keep-it-simple\">\r\n        <h3>Keep it simple!</h3>\r\n        <p>In order for something to happen on the Network, for example, the storing of a data chunk at a certain address, the Group of Vaults with responsibility for that address must decide that the action is valid. If the required quorum size (for example, 50 Vaults out of 80) agree that the event is valid, it will go ahead; if not, it won't. </p>\r\n        </div>\r\n        <p>A record of all such events is kept in a container called a Data Chain. Any new node joining the Section can read the Data Chain. Sections also share some information about events and current state with other Sections that are close to them.</p>\r\n           \r\n        <p>Because of this, all events which take place within a Section are cryptographically verifiable by any node that joins the Section. These events are also stored by neighbouring Sections (those closest to the Section measured in XOR distance). An example of neighbouring Sections would be S(0000111) and S(0000110) - as the two addresses differ by a single digit. So the nodes managing a Section S(0000110) know about all the nodes managing S(0000111) as well. They also have access to the part of the Data Chain containing all the information about this Section.</p>\r\n  \r\n        <p className=\"Pullquote\">\"No node in the SAFE Network has a complete overview of the network\"</p>\r\n        <p>The closer a node is to a certain address space on the SAFE Network, the more information it has about data that is stored at that address. And logically the further away a Vault is, the less information it has. The bigger the Network becomes, the more secure it will get because an individual Vault will have influence over a decreasing range of addresses.</p>\r\n        <p>An action or event happening in a Section is only valid once a quorum has approved it. A change of state needs to be signed by a certain proportion of that Group known as the quorum size. Nodes follow rules that stipulate the quorum size. In a group of 80 nodes, 50 are required to approve an action (such as a request by a Client to store a chunk of data); in this case, the quorum size is 62.5 percent.</p>\r\n        <p>Notice that there are no external trackers or managers involved in any of these decisions. A Group of Vaults operates in a fully autonomous way within the Network.&nbsp; &nbsp;</p>\r\n        <h3>Tell me more...</h3>\r\n        <p><a href=\"http://www.globule.org/publi/SDST_acmcs2009.html\">A Survey of DHT Security Techniques (Globule)</a></p>\r\n        <p><a href=\"https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf \">Kademlia: A Peer-to-peer information system based on the XOR Metric (Whitepaper)</a></p>\r\n        <p><a href=\"http://docs.maidsafe.net/Whitepapers/pdf/MaidSafeDistributedHashTable.pdf \">Distributed Hash Table (MaidSafe Whitepaper)</a></p>\r\n        <p><a href=\"http://docs.maidsafe.net/Whitepapers/pdf/DHTbasedNATTraversal.pdf \">DHT-based NAT Traversal (MaidSafe Whitepaper)</a></p>\r\n        <p><a href=\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure \">Disjoint-set data structure (Wikipedia)</a></p>\r\n        <p><a href=\"https://github.com/maidsafe/rfcs/blob/master/text/0037-disjoint-groups/0037-disjoint-groups.md \">Disjoint Sections (MaidSafe RFC)</a></p>\r\n        <p><a href=\"https://github.com/maidsafe/routing\">Routing - special storage DHT (MaidSafe repository)</a></p>\r\n        <p><a href=\"https://metaquestions.me/2016/07/20/data-chains-what-why-how/\">Datachains: What? Why? How? (David Irvine, Metaquestions blog)</a></p>\r\n  \r\n\r\n       \r\n    </div>\r\n\r\n);\r\n\r\nexport default Chap4;","import React from 'react';\r\nimport vaults_journey from '../images/vaults_journey.jpg';\r\n\r\n\r\n\r\nconst Chap5 = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch5'>5. Node Age</h2>\r\n        \r\n        <p>When a Vault joins the Network, it first needs to discover the IP addresses of some existing Network participants. At the Network launch, MaidSafe will temporarily provide a small number of bootstrap servers (Internet-connected machines running the Vault software). The IP addresses of these bootstrap nodes are included in the new Vault's configuration file so it can connect to other known Vaults in the Network. The connection itself is fully encrypted (with the randomly-generated public keys of all valid Vaults being stored on the Network) and that initial connection is dropped immediately after the first hop once the new Vault has connected to others in the Network.</p>\r\n        <div className=\"Keep-it-simple\">\r\n        <h3>Keep it simple!</h3>\r\n        <p>Just as children are not allowed to vote in elections, so a node (Vault) may not vote on network events - such as whether a new member is allowed to join or whether a Section should split or merge - until it has proven itself to be reliable. A node gains trust each time it moves to a new Section whereupon its Node Age increases by 1. Once it is among the oldest in its Section (in terms of Node Age), it may be given voting rights as an Elder. Forcing nodes to prove themselves in this way is an important security measure.</p>\r\n        </div>\r\n        <p>A Vault connects to other Vaults over the quic-p2p layer, sending out a message that it wants to join the Network.</p>\r\n   \r\n        <p>A Section has to reach consensus before allowing a new node to join. In this case the Vaults will send out a Resource Proof request which forces the new Vault to prove that it can provide a certain amount of bandwidth, storage and CPU capacity.</p>\r\n        <p>If the new Vault successfully completes the Resource Proof test it is then assigned to an address on the Network. It starts as a member of a Section with a low &lsquo;Node Age&rsquo; - in other words, it doesn&rsquo;t yet have voting rights and is liable to be moved off to another Section at any moment.</p>\r\n        <p>When a Vault leaves the Section, it is sent at random to another Section by the Network</p>\r\n        <p>The process of incrementing its Node Age is exponential - it's increasingly difficult the older the node is. Newer Vaults are more likely to be moved to a new Section (and thus increment their Node Age) than older, more trusted ones. If Vaults lose the trust they&rsquo;ve earned, it must be re-earned. Only once a Vault reaches a certain Node Age can it vote on Network events. Because only Vaults that have proved their value to the Network can vote, it is close to impossible for&nbsp; an attacker to target a particular Section on the SAFE Network. Node Ageing and churn (nodes swapping Sections) are thus vital security features.</p>\r\n        <p>Only the most trusted Vaults in a Section, those Vaults with the greatest Node Age, have voting rights. These Vaults are called Elders. Other Vaults (Children, Adults) simply receive notification of their decisions.</p>\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img\" src={vaults_journey} alt=\"Vault's journey\"  align=\"center\" />\r\n        </div>\r\n        \r\n        <div className=\"What-does-that-mean\">\r\n        <h3>What does that mean?</h3>\r\n            <p>quic-p2p - a networking library that enables peers on a P2P network to communicate securely, and to re-join the network without requiring a hard-coded list of known peers.</p>\r\n        <p>Resource Proof - a test of bandwidth, storage space and CPU power. If a Vault trying to join the Network fails the test, it will not be allowed to join.</p>\r\n        <p>Node Age - a measure of the trustworthiness of a node (Vault). After the initial connection, a Vault gets moved at random from Section to Section, building its reputation or Node Age. Once its Node Age reaches a certain value it can be an active participant in the decisions of the Sections.</p>\r\n        <p>Churn - the act of Vaults leaving a group or new Vaults joining. Churn means that Groups are not static for long.</p>\r\n        <p>Elder - a node with voting rights in its Group. Elders are simply those nodes with the greatest Node Age in the Group.</p>\r\n        </div>\r\n        <h3>&nbsp;Tell me more...</h3>\r\n        <p><a title=\"safe explained\" href=\"https://safe-network-explained.github.io/architecture\">SAFE Network Explained</a></p>\r\n        <p><a title=\"Introduction &amp; Technical Overview of SAFE Consensus\" href=\"https://blog.maidsafe.net/2016/06/23/introduction-technical-overview-of-safe-consensus/\">Introduction &amp; Technical Overview of SAFE Consensus</a></p>\r\n        <p><a title=\"deep dive\" href=\"https://forum.safedev.org/t/data-chains-deeper-dive/1209\">Data Chains - Deeper Dive</a></p>\r\n      \r\n        <p><a href=\"http://conferences.sigcomm.org/imc/2006/papers/p19-stutzbach2.pdf\">Understanding Churn in Peer-to-Peer Networks (Sigcomm, Research paper)</a></p>\r\n\r\n       \r\n    </div>\r\n\r\n);\r\n\r\nexport default Chap5;","import React from 'react';\r\n\r\n\r\n\r\nconst Chap6 = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch6'>6. Encryption</h2>\r\n        <p>All data on the SAFE Network is protected by several layers of encryption. Even public data (like a blog safe://website/blog) is fully encrypted, but in this case the keys needed to decrypt the data are shared with visitors to make it available to them. This makes it different from other peer-to-peer networks like BitTorrent and IPFS where data is not natively encrypted. SAFE puts security first every time. </p>\r\n        <div className=\"Keep-it-simple\">\r\n        <h3>Keep it simple!</h3>\r\n            <p>All data on the SAFE Network is encrypted or kept in encrypted containers. To store a file on the network it is first broken into chunks, hashed and then encrypted and these chunks are themselves encrypted using the hash of another chunk from the same file. This is Self-Encryption - a method patented by MaidSafe but now open-sourced. </p>\r\n            </div>\r\n        <p>At the network level, the SAFE Network uses the TCP, UTP and &micro;TP protocols and all the data moved by these protocols is encrypted from 'bit 1'. This means that the first connection to the SAFE Network that a Vault or Client makes is to a bootstrap server, one of a number of temporary servers run by MaidSafe to allow new machines to join. The randomly generated public keys for these bootstrap servers are retrieved from the network by the Client, so communications between the Network and the user are always encrypted, never in plain text. Note that any Vault on the Network can be used as a bootstrap server so long as its IP address is added to the configuration file of the joining node. It definitely does not have to be one provided by MaidSafe. </p>\r\n        <p>Clients and Vaults in the Network get a list of IPs and public keys of other users to connect to. These connections are also encrypted from bit 1. </p>\r\n        <h3>Clients connect via a Proxy Node</h3>\r\n        <p>To ensure anonymity, the identity of a Client connecting to the Network must be hidden from the nodes (Vaults) that comprise it. For this reason, the initial connection between a Client and a Vault always occurs via a Proxy Node. The Proxy Node knows the Client's IP address and will allow it to connect to a Section. The Vaults cannot see the Client's IP address but they know its public key and XOR address. All connections between the Client and the Group(s) are fully encrypted.</p>\r\n        <p>The Proxy Node provides a service to the user, connecting him or her to the Network without having any knowledge of activity thereafter. The Group of Vaults to which the user is connected might know a little about what the user is doing on the Network but they can only identify the user by their XOR address and not their IP. In this way, complete anonymity is assured.</p>\r\n        <h3>Self-encryption of data</h3>\r\n        <p>As mentioned above, all data on the SAFE Network is encrypted (or held in containers that are encrypted). When a Client uploads a piece of data to the Network (for example an mp4 video) it is first broken into chunks and those chunks are then 'self-encrypted', a process patented by MaidSafe by which each chunk is encrypted using its own hash and the hashes of the two previous chunks in the same file. These encrypted chunks are then hashed again to arrive at the XOR address where the chunk will be stored. At the same time a Data Map is created on the Client device, which maps the chunk number to the XOR address of the chunk and the hash to decrypt it and its two successors, allowing the file to be recreated. A number of copies of each chunk are stored by Vaults in the Section to ensure redundancy.</p>\r\n        <p>The Client retains the keys to decrypt the data locally. That way no keys or passwords need ever leave a person's device. The chunks are stored on the SAFE Network in a fully encrypted way. Users can choose to share these files with others by sharing their keys with them. They can also choose to make the files fully public, in which case the keys required to decrypt the files are made publicly available, as with the example of a blog.</p>\r\n        <div class=\"Pullquote\"><p>\"The SAFE Network provides a platform for applications that is both highly secure and anonymized by design\"</p></div>\r\n        <h3>Multilayered encryption</h3>\r\n        <p>The SAFE Network uses several layers of encryption to protect a user's anonymity and privacy. Several extra layers are active when people use direct messaging or create a public profile. The Network is designed to be as 'zero-knowledge' as possible, to the extent that Farmers cannot possibly figure out what chunks from which private file they are storing - even if it's their own. By utilizing multiple levels of encryption as well as obfuscating the identity of its users after the first hop, the SAFE Network provides a platform for applications that is both highly secure and anonymized by design.</p>\r\n        <div className=\"What-does-that-mean\">\r\n        <h3>What does that mean?</h3>\r\n        <p>Self-Encryption - Files uploaded to the SAFE Network are broken up into chunks. These chunks are then hashed, encrypted locally using the AES-256 encryption algorithm and the hashes of neighbouring chunks. Because data is encrypted and decrypted locally, there is no need for keys to leave the user's machine.</p>\r\n        <p>Proxy Node - For each Client connection into the Network, there is an anonymizing Proxy Node which relays all data to and from destinations within the Network, but the proxy cannot read any of the data (for those familiar with Tor, this function is akin to a 'guard node').</p>\r\n            <p>Data Map - a record of file chunks and their corresponding locations on the Network. Only those in possession of the Data Map can recreate the file. </p>\r\n            </div>\r\n        <h3>Tell me more...</h3>\r\n        <p><a title=\"sodium\" href=\"https://github.com/maidsafe/rust_sodium\" target=\"_blank\" rel=\"noopener noreferrer\" >Connecting to the Sodium crypto library</a></p>\r\n        <p title=\"Crypto 101 \"><a title=\"Crypto 101 \" href=\"https://www.crypto101.io/ \" target=\"_blank\" rel=\"noopener noreferrer\" >Crypto 101&nbsp;</a></p>\r\n        <p title=\"Crypto 101 \"><a title=\"consensus\" href=\"https://medium.com/safenetwork/introduction-technical-overview-of-safe-consensus-c8ea257e3ff8\" target=\"_blank\" rel=\"noopener noreferrer\" >Introduction &amp; Technical Overview of SAFE Consensus (Blog)</a></p>\r\n        <p><a title=\"Self-encryption\" href=\"https://maidsafe.net/features.html#self-encryption\" target=\"_blank\" rel=\"noopener noreferrer\" >Self-encryption - data that encrypts itself, with itself (MaidSafe) </a></p>\r\n        <p><a title=\"Self Encryption\" href=\"https://www.youtube.com/watch?v=Jnvwv4z17b4\" target=\"_blank\" rel=\"noopener noreferrer\" >Self Encryption on the SAFE Network (YouTube)</a></p>\r\n        <p><a title=\"Self-encrypting Data\" href=\"http://docs.maidsafe.net/Whitepapers/pdf/SelfEncryptingData.pdf\" target=\"_blank\" rel=\"noopener noreferrer\" >Self-encrypting Data (MaidSafe Whitepaper)</a></p>\r\n        <p><a title=\"UDP Hole Punching \" href=\"https://github.com/maidsafe/rfcs/blob/04f276056bf909f415b47ae341b16ce78af0c7a4/text/0008-udp-hole-punching/0008-udp-hole-punching.md\" target=\"_blank\" rel=\"noopener noreferrer\" >UDP Hole Punching (MaidSafe RFC) </a></p>\r\n       \r\n    </div>\r\n\r\n);\r\n\r\nexport default Chap6;","import React from 'react';\r\n\r\n\r\n\r\nconst Chap7 = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch7'>7. PARSEC consensus algorithm</h2>\r\n  \r\n        <h3>Decentralized consensus</h3>\r\n  \r\n        <p>Truly decentralized networks can have no master node to judge what is true or valid and what is not. Instead, the nodes that make up the Network must come to an agreement among themselves about which of many possible versions of &ldquo;the truth&rdquo; they will accept.</p>\r\n  \r\n        <p>Discrepancies can arise for many reasons, but a frequent cause is the physical distance between nodes. As an example, let&rsquo;s say node Alice in Sydney relays a message to node Bob in Edinburgh. Before the signal can travel halfway around the world, node Carol in London transmits a different message to Bob. Because London is much closer to Edinburgh, Carol's message arrives before Alice's, even though it was sent later. Without a central time-clock, how can we decide which is the correct order of events? It's important that the Network picks wisely one version of events and sticks with it, since all future events on the Network will be affected by its decision. It does this by asking nodes to report on what they saw, deriving the most likely course of events and then finally propagating that version around the Network.</p>\r\n  \r\n        <p>In our example, the nodes that make up the Network must vote on which message - Alice's or Carol's - they will accept as being sent first, based on information about the two events that each of the nodes making up the Network has received. What&rsquo;s more, the Network must account for the fact that a certain proportion of the nodes may be unreliable or even actively malicious and yet still converge on one rules-based version of the truth. This is called Byzantine Fault Tolerance (BFT). The way the maths works out, up to one-third of the nodes could be corrupt (Byzantine) and a Network with a good BFT consensus algorithm will still function reliably. (If more than a third are corrupt, BFT becomes mathematically impossible according to current theory.)</p>\r\n  \r\n        <h3>Proof of Work</h3>\r\n  \r\n        <p>The Bitcoin blockchain uses Proof of Work to achieve consensus and to prevent the problem of double-spend &ndash; being able to spend the same coin twice. Miners battle to verify a block of transactions. If there are two simultaneous winners the chain will split and for a time there are two versions of the truth, i.e. two chains emanating from the disputed block. Ultimately, though, after a few blocks have been added one chain will be longer than the other, and it is this chain that will be accepted as the true state. The failed blocks go back into the pot to be verified again. This is how the Bitcoin blockchain (and most other blockchains) achieves consensus. This mechanism also offers a defence against the 51 percent attack (see Chapter 12).</p>\r\n  \r\n        <p>Since miners are (ideally) independent operators distributed all over the world, and because it takes a lot of energy to verify a block, it is extremely difficult and expensive to deliberately influence the growth of one sub-chain over another. Difficult but not impossible: if one miner or mining group manages to consolidate more than half of the mining power, that miner can then spend some Bitcoin, split the chain and then grow the sub-chain that does not contain the transaction. Effectively this rogue miner is rewriting history. Once that sub-chain is accepted as &lsquo;the truth&rsquo; the original transaction officially never happened according to the ledger, and the miner is free to spend the coins again.</p>\r\n        <p>This is the Sybil attack, also known as the 51 percent attack because it becomes possible when one entity owns more than half of the mining power.</p>\r\n        <p>While such attacks have been successfully launched against some cryptocurrencies, Ethereum Classic being one example, Proof of Work has generally been rather effective in protecting against 51 percent attacks and at achieving BFT consensus across the network. But it is slow, massively energy intensive and it doesn&rsquo;t scale. Also, the consensus is probabilistic: after some time, you might be 99.9 percent sure that all nodes agree on network state, but never 100 percent.</p>\r\n        <h3>Enter PARSEC</h3>\r\n  \r\n        <p>By contrast, the consensus algorithm used by the SAFE Network, PARSEC (Protocol for Asynchronous, Reliable, Secure and Efficient Consensus) is massively scalable, able to handle the millions of parallel transactions per second demanded by IoT-type applications, Byzantine fault tolerant, and provides 100 percent consensus that's mathematically provable. In time, all Elders (see Chapter 5) will agree on the same order of events, no matter what the physical distance between them and despite disparities between their resources, without requiring their &lsquo;votes&rsquo; to be fielded in any particular order (that&rsquo;s what the word &lsquo;asynchronous&rsquo; means). Because it is not blockchain-based, the SAFE Network can take advantage of some features developed for directed acyclic graphs (DAGs) such as gossip and concrete and common coins.</p>\r\n  \r\n        <p>Gossip is a protocol used to establish asynchronous communication between nodes. Briefly, every time a node observes an event on the Network (e.g. the storage of a chunk of data, a Safecoin transaction, a GET request) it transmits this information to another randomly selected node, which in turn passes it on to another node, and so on. As each node learns of a new event, it adds it to its gossip graph, which is a record of changes on the Network. Eventually, by this process of tittle-tattle everyone gets to hear about what everyone else has seen and done &ndash; and very quickly: Gossip requires significantly fewer connections between nodes than all-to-all communication schemes.</p>\r\n        <div className=\"What-does-that-mean\">\r\n        <h3>What does that mean?</h3>\r\n        <p>Byzantine fault tolerance - the ability of a decentralized network to function properly even if up to a third of the nodes (plus 1) is corrupt or faulty.</p>\r\n        <p>Asynchronous &ndash; Not time-dependent. PARSEC does not need to rely on strict order or timing of arrival of signals.</p>\r\n        <p>Gossip - a method of rapidly transmitting information around a decentralized network.</p>\r\n        <p>Gossip graph - a record of events on the network and the order in which they happened. Each Elder holds its own gossip graph, and consensus is reached when Elders' gossip graphs match.</p>\r\n        <p>Valid block - an event that has been recorded by at least two thirds of the Elders.</p>\r\n        <p>Concrete Coin - A protocol for forcing consensus in a random way in the event of a tie.</p>\r\n        <p>Common Coin - A more sophisticated way of forcing consensus than Concrete Coin.</p>\r\n        <p>Malice Detection - detecting and ejecting nodes that are acting suspiciously.</p>\r\n     </div>\r\n   \r\n        <p>Gossip may spread like wildfire, but who do we believe? Bob, our Edinburgh node, is adamant that he saw Carol&rsquo;s message before Alice's, but then a fourth node Dave in Jakarta says that he passed the message to Alice ages before he heard from Carol and so Alice's message was the first and true version - and so on. Each node sees a different version of events. This thorny problem is solved by a system of voting.</p>\r\n  \r\n        <p>In parallel, each Elder casts a single vote for its own version of an event. Via gossip, the Elders first decide which of these votes is credible (called a valid block) based on whether they are known about through gossip by two-thirds of the total number of Elders (a supermajority).</p>\r\n  \r\n        <p>PARSEC then begins a stepwise process called Binary Value Gossip (BV Gossip) whereby each Elder decides whether that particular valid block is worthy of consideration (true or false). As this process continues, any Elders that are seen to be acting maliciously are flagged up and will be ejected from the Network if consensus for that action is reached.</p>\r\n  \r\n        <p>Eventually, after a number of steps, a common story will be arrived at concerning the order in which events occurred on the Network and the Elders' gossip graphs will all be identical. This version of events will be accepted as the true state. To prevent the outcome of the voting process being predictable, PARSEC uses a mechanism called a Concrete Coin which is &lsquo;flipped&rsquo; to decide a vote one way or another by giving temporary leadership to one of the responsive voting nodes, that node being selected at random. The Concrete Coin protocol favours &lsquo;honest&rsquo; reliable nodes &ndash; those that respond to gossip when requested - over unreliable and possible malicious ones. Even if the temporary leader goes offline consensus will still be reached.</p>\r\n        <div className=\"Keep-it-simple\">\r\n            <h3>Keep it simple</h3>\r\n            <p>PARSEC is a way for voting nodes (Elders) to decide what has happened on the Network, even if there are many different possible versions. It does this through gossip, in which an Elder passes an observation to another randomly selected Elder which in turn tells that first Elder its own version of events. The Elders then vote on their versions of events, eliminating less popular versions as they go. Eventually, they will arrive at one version of events which will be accepted as the true one. This will work even if up to one-third of the Elders in a Section are malicious. PARSEC also includes Malice Detection capabilities to spot and eject Elders that are acting suspiciously.</p>\r\n        </div>\r\n        <p>It can be proven that ultimately all trustworthy nodes will have identical gossip graphs &ndash; i.e. they will agree on an order of events &ndash; even if up to one-third of the total number are malicious.</p>\r\n        <p>PARSEC is used by Elders as they vote on events within their Section. Once consensus has been reached within a Section, the decision is then propagated across the entire network. PARSEC includes Malice Detection capabilities in which Elders randomly query Vaults and check their responses. If the response is not as expected the Elders may vote to eject that Vault from the network.</p>\r\n        <p>Unlike PoW, however, PARSEC does not offer strong protection from Sybil attacks. That is dealt with by a combination of Node Ageing and random allocation of Network address to a joining Vault (See Chapter 6).</p>\r\n        <p>Asynchronous Byzantine Fault Tolerance (ABFT) represents the highest level of security that a decentralized network can achieve. If a network achieves ABFT, it means its nodes are guaranteed (mathematically) to reach consensus. Importantly it does not rely on any notion of time. Instead it is based on records of events stored in the gossip graphs of each node. Introducing a time property in a decentralized network inevitably requires some centralization, such as deploying a time server, and adds significantly to complexity.</p>\r\n        <p>At the time of writing, PARSEC represents the cutting edge of fully ABFT algorithms, with work ongoing to finalise its fully asynchronous nature by replacing the Concrete Coin workaround with a more sophisticated 'Common Coin' mechanism. This will involve incorporating the Boneh-Lynn-Shacham (BLS) signature scheme into the routing process to allow multisig transactions between nodes to securely verify quorum. A new white paper will be published in due course.</p>\r\n  \r\n        <h3>Tell me more &hellip;</h3>\r\n        <p><a title=\"parsec\" href=\"https://docs.maidsafe.net/Whitepapers/pdf/PARSEC.pdf\" target=\"_blank\" rel=\"noopener noreferrer\" >Protocol for Asynchronous, Reliable, Secure and Efficient Consensus (PARSEC) (MaidSafe Whitepaper)</a></p>\r\n        <p><a title=\"Signature-Free Asynchronous Byzantine\" href=\"https://hal.inria.fr/hal-00944019/document\" target=\"_blank\" rel=\"noopener noreferrer\" >Signature-Free Asynchronous Byzantine Consensus with t &lt; n/3 and O(n2) Messages (Mostefaoui et al) </a></p>\r\n        <p><a title=\"eth classic\" href=\"https://medium.com/datadriveninvestor/ethereum-classic-hacked-by-51-attack-f62c70cadd5c\" target=\"_blank\" rel=\"noopener noreferrer\" >Ethereum Classic &ldquo;HACKED&rdquo; by 51% attack! (Medium)</a></p>\r\n        <p><a title=\"parsec\" href=\"https://www.youtube.com/watch?v=VmFUUsGaWQU\" target=\"_blank\" rel=\"noopener noreferrer\" >A Deep Dive into PARSEC | Concrete Coin (YouTube)</a></p>\r\n        <p><a title=\"bft\" href=\"https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Distributed%20Computation/BYZANTYNE%20AGREEMENT%20MADE%20TRIVIAL.pdf\" target=\"_blank\" rel=\"noopener noreferrer\" >Byzantine Agreement, Made Trivial (Micali) (MIT)</a></p>\r\n        <p><a title=\"honeybadger\" href=\"https://medium.com/poa-network/poa-network-how-honey-badger-bft-consensus-works-4b16c0f1ff94\" target=\"_blank\" rel=\"noopener noreferrer\" >POA Network: How Honey Badger BFT Consensus Works (Medium)</a></p>\r\n        <p><a title=\"parsec\" href=\"https://medium.com/safenetwork/parsec-the-release-of-the-code-91d514faaa71\" target=\"_blank\" rel=\"noopener noreferrer\" >PARSEC: The Release of the Code (Medium)</a></p>\r\n        <p><a title=\"BLS\" href=\"https://en.wikipedia.org/wiki/Boneh%E2%80%93Lynn%E2%80%93Shacham\" target=\"_blank\" rel=\"noopener noreferrer\" >Boneh-Lynn-Shacham (Wikipedia)</a></p>\r\n        \r\n    </div>\r\n\r\n);\r\n\r\nexport default Chap7;","import React from 'react';\r\nimport proof_of_resource from '../images/proof_of_resource.jpg';\r\nimport resources_and_currency from '../images/resources_and_currency.jpg';\r\n\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n\r\n    \r\n        <h2 id='ch8'>8. Farming for Safecoin</h2>\r\n\r\n        <p>The main incentive for Vault operators to join the Network and cooperate toward the goal of secure data storage is to earn Safecoin. The idea behind Safecoin is similar to that of Bitcoin: to ensure that cooperative participation is a more rational course of action than uncooperative or malicious participation. Safecoin can be spent on the Network or exchanged for other currencies.</p>\r\n\r\n        <p>The amount of data that a user can store on the SAFE Network depends on the Safecoin balance of the user's account.</p>\r\n        <div className=\"Keep-it-simple\">\r\n        <h3>Keep it simple!</h3>\r\n\r\n            <p>Farming is the process by which users who lend out spare storage can earn Safecoin, the currency of the SAFE Network. Safecoin can be spent on the Network, for example by uploading files.</p>\r\n        </div>\r\n\r\n        <p>When a user of the Network requests some data, for example by browsing a website, a number of things happen. First, the Client software makes a request for the required data chunks. This message (a GET request) is then propagated across the Vaults, and when the chunk is found there is a competition between the Vaults in that section to deliver it to the Network where it will be routed back to the requester. The first Vault to deliver will have a chance of being rewarded with one Safecoin. This process is described as a Farming Attempt.</p>\r\n\r\n        <p>A successful Farming Attempt will be rewarded by payment in Safecoin. However, the probability of this happening will depend on the farming_rate, which is a variable based on the quantity of free resources in the Network as well as the number of Safecoin in circulation. The Network will always try to maintain free space of at least 30 percent of its total capacity (to cover a disconnection or outage in certain parts of the Network). When the free space drops below 30 percent of the total capacity, the farming_rate will go up and more Farming Attempts will succeed. This way Farmers make more money providing chunks to the Network. It works the other way around as well. When there are too many Farmers providing storage space the farming_rate will go down. This happens automatically, and the effect is to create an incentive for farmers to provide storage when the overall spare capacity is low, and a disincentive when the amount of free space is high.&nbsp;</p>\r\n        <div className=\"What-does-that-mean\">\r\n        <h3>What does that mean?</h3>\r\n\r\n        <p>Farming - a Vault delivers a data chunk that it is storing to the SAFE Network and earns Safecoin in return.</p>\r\n\r\n            <p>Farming Attempt - by delivering data chunks when requested, a Vault may gain the opportunity to make a Farming Attempt. </p>\r\n            <p>farming_rate - a variable used to attract or discourage Farmers in order to maintain a certain level of free space (about 30 percent of the total capacity).</p>\r\n\r\n        <p>MaidSafeCoin - a cryptocurrency token currently available for purchase that will be exchangeable for Safecoin once the network is live.</p>\r\n\r\n            <p>Proof of Resource&nbsp; - 1. a test whether a Vault that wants to join the network has sufficient bandwidth and CPU power. If it fails the test it will not be allowed to join. 2. Random checks are occasionally made by managing nodes to ensure that the Vault is indeed maintaining chunks it is supposed to be storing. If it fails the challenge (by not providing the demanded proof) its Node Age is diminished.</p>\r\n            </div>\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img1\" src={proof_of_resource} alt=\"POR\" align=\"center\" />\r\n        </div>\r\n  \r\n\r\n   \r\n\r\n        <p>The Network will balance itself in a way that's completely independent of the price of Safecoin. By adjusting the farming_rate according to the amount of free available space on the Network users storing data are charged at the optimum rate. While the storing rate is high (available free space is lower) users are discouraged from storing thus helping to free up more space. This dynamic pricing should translate into very competitive prices for data storage.</p>\r\n   \r\n        <p>Everyone with a suitable device and sufficient bandwidth is welcome to farm and thereby contribute to the network - including data centre owners. Nodes are continuously rewarded according to the quality of the resource they provide using Node Age, PARSEC and other features collectively known as Proof of Resource. To minimize the risk of centralization, however, the use of huge farming rigs will be economically disadvantageous compared with running multiple smaller nodes.</p>\r\n        <div className=\"Pullquote\">\r\n            \"There's more incentive for Farmers to provide storage when the overall spare capacity is low, and less incentive when the amount of free space is high\"\r\n                </div>\r\n\r\n        <p>While it cannot be guaranteed, the indications are that bandwidth and storage capacity will continue to increase rapidly for the next decade or two. This means that data will never&nbsp;have to be deleted, with all information stored indefinitely for the foreseeable future.&nbsp;&nbsp;</p>\r\n\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img src={resources_and_currency} alt=\"resources and currency\" width=\"70%\" align=\"center\" />\r\n        </div>\r\n\r\n    \r\n\r\n       \r\n        <p>The supply of Safecoin will be limited to 4.3 billion coins, each with its own unique identity. Safecoins will be recycled when users exchange them for Network services, which means that there is always a supply for Farmers to earn.</p>\r\n\r\n        <p>Note: At the time of writing the SAFE Network is still pre-release (Alpha) and Safecoin is not yet implemented. However, a token called MaidSafeCoin (MAID) can be purchased on cryptocurrency exchanges. When the Network goes live MAID will be exchanged for Safecoin on a 1:1 basis.</p>\r\n\r\n        <h3>Tell me more...</h3>\r\n\r\n        <p><a title=\"Safecoin \" href=\"https://safenetwork.tech/safecoin/\" target=\"_blank\" rel=\"noopener noreferrer\" >This is Safecoin (SAFE Network website)</a> &nbsp;&nbsp;</p>\r\n\r\n        <p><a title=\"Safecoin Implementation\" href=\" https://github.com/maidsafe/rfcs/blob/master/text/0012-safecoin-implementation/0012-safecoin-implementation.md\" target=\"_blank\" rel=\"noopener noreferrer\" >Safecoin Implementation (MaidSafe RFC)</a> &nbsp;</p>\r\n\r\n        <p><a title=\"Farm Attempt \" href=\"https://github.com/maidsafe/rfcs/blob/master/text/ \" target=\"_blank\" rel=\"noopener noreferrer\" >Farm Attempt (MaidSafe RFC)</a></p>\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default component;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch9'>9. Vault personas</h2>\r\n        <p>The Vaults that form the SAFE Network have different functions to fulfil. They route and store chunks of data. They cryptographically check messages and split into new groups or merge back if their group is becoming too small. They also take on more defined roles which are called personas.</p>\r\n\r\n        <h3>The Client Manager</h3>\r\n        <p>The Client Manager persona holds an account for each Client which is close to it in the Network address space - i.e. in its Section. Each Client account is managed by around eight Vaults (this number may change as the Network is developed).</p>\r\n\r\n        <p>A Client account contains details of the number of chunks of data that have been stored on the Network by that Client and how many new chunks can still be uploaded. If a Client account indicates that no more chunks can be put to the Network (because of insufficient Safecoin), the Client Managers for that Client disallow any further PUT requests, responding with a LowBalance error.</p>\r\n        <p>Clients can retrieve their account balances by sending a specific request to their Client Managers (a GetAccountInfo request).</p>\r\n        <p>A SAFE Network Client account is completely different from a Gmail or Facebook account as it is not linked to any identity. The Client Managers know the account balance of a Client but to them it's just an address in the Network. They don't know the IP address of the Client nor do they have any knowledge of a username, public identity or anything else that could link the Client to an individual.</p>\r\n\r\n        <h3>Data Manager</h3>\r\n        <p>The Data Manager persona manages a chunk store where data chunks are held and is responsible for those chunks in its Section. Not every Data Manager in a given Group will necessarily hold that chunk, but each will be aware of which peers do hold it.</p>\r\n\r\n        <h3>Tell me more...</h3>\r\n        <p><a title=\"Data Manager\" href=\"https://blog.maidsafe.net/tag/datamanager/\" target=\"_blank\" rel=\"noopener noreferrer\" >Data Manager - consensus without a blockchain (MaidSafe blog)</a> </p>\r\n        <p><a title=\"SAFE Consensus\" href=\"https://blog.maidsafe.net/2016/06/23/introduction-technical-overview-of-safe-consensus/\" target=\"_blank\" rel=\"noopener noreferrer\" >Introduction &amp;amp; Technical Overview of SAFE Consensus (MaidSafe blog)</a></p>\r\n        <p><a title=\"Safe_vault \" href=\"https://github.com/maidsafe/safe_vault\" target=\"_blank\" rel=\"noopener noreferrer\" >Safe_vault (Github repository)</a></p>    </div>\r\n\r\n);\r\n\r\nexport default component;","import React from 'react';\r\nimport data_types from '../images/data_types.png';\r\n\r\n\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch10'>10. Data types</h2>\r\n        <p>The SAFE Network provides three main data types for storing and retrieving data: MutableData (MD), ImmutableData (ImD) and AppendOnlyData (AD). As their names suggest, MutableData can be changed whereas ImmutableData cannot. Meanwhile, with AppendOnlyData information can be added by authorized individuals or apps to create a new version but previous versions are never deleted, instead they remain as a permanent record. </p>\r\n        <p>There are some sub-categories too. On the SAFE Network data can be either 'public' or 'private'. Private data can only be accessed by its owner, or others that he or she chooses to share it with, and it can also be deleted. Public data is available to anyone, as a normal website is today, but it cannot be deleted. MutableData can only ever be private.</p>\r\n        <p>'Sequenced' and 'unsequenced' are two additional subcategories that apply to MutableData and AppendOnlyData only. Sequenced data can be edited, whereas unsequenced data is read-only.</p>\r\n        <p></p>\r\n        <h3>MutableData</h3>\r\n        <p>A MutableData structure is composed of entries. An entry is a key-value pair (e.g. key 1: value banana). Entries can be inserted, updated or deleted.</p>\r\n        <p>A MutableData entity can hold up to 1,000 entries and contain a maximum of 1 MB of data.</p>\r\n        <p>MD can only be private. This is because the Perpetual Web is a fundamental concept of the SAFE Network and public data cannot be deleted. One use case for MD would be drafting a document in private.</p>\r\n        <h3>ImmutableData</h3>\r\n        <p>An ImmutableData structure can only store a single value. Its Network address is derived from the hash of its content. This means the file cannot be edited in any way after it has been uploaded - any change would alter the hash and therefore its address meaning it could not be found. A single ImD entity is also limited to 1 MB, but by using a Data Map to keep track of their locations files larger than 3 Kb can be split into chunks with those chunks stored as separate ImD entities (see Chapter 6).</p>\r\n        <p>Data deduplication is a unique feature of the SAFE Network and a side benefit of the process of Self-Encryption (see Chapter 6). Two identical ImD chunks will have the same hash value, and therefore only one (plus a few copies for redundancy) need be stored on the Network.</p>\r\n        <p>ImD can be cached by Clients and fetching the same chunk next time can be quicker. SAFE also has a feature called Opportunistic Caching in which more copies of popular data are created closer to where it is being requested, so popular websites and other data feeds will actually speed up as they get more visitors, rather than slowing down as they do on today's Web.</p>\r\n        <p>Use cases for ImD include images, videos and documents that must not be altered.</p>\r\n        <h3>AppendOnlyData</h3>\r\n        <p>AoD can be either public or private. If you make changes to the data it will result in a new version - but you can’t  edit or delete the existing ones, hence the name AppendOnly.</p>\r\n\r\n        <p>A published document can be updated or corrected an unlimited number of times, but the original version(s) will always be accessible. This is similar to the Internet Archive's Wayback Machine works, which records websites at regular intervals so you can dial back to see content from the past, even though the site owners may have deleted it long ago. All public SAFE sites will have this capability automatically.</p>\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img src={data_types} alt=\"Data types\" width=\"70%\" align=\"center\" />\r\n        </div>\r\n        <p><em>Source: MaidSafe</em></p>\r\n        <p>Data is saved using a combination of AppendOnlyData and ImmutableData to create an emulated file system on top of the Network called NFS (Network File Storage). NFS saves a file's content as ImmutableData. It then creates an entry in a FilesContainer, an AppendOnlyData entity, with the file name as the entry's key and the ImmutableData's address as the entry's value. The file can be updated by uploading a new ImmutableData file and then altering the file's address in the FileContainer structure to point to the new file. </p>\r\n        <div className=\"What-does-that-mean\">\r\n            <h3>What does that mean?</h3>\r\n            <p>XOR address - a unique 256-bit number. Every entity on the Network has an XOR address. </p>\r\n            <p>XOR URL - a base-32 encoded translation of the XOR address together with other information such as data type as required by applications. </p>\r\n            <p>Network File Storage (NFS) - an API that allows a Client to access files stored on the SAFE Network.</p>\r\n            <p>Name Resolution System (NRS) - analogous to the Domain Name System on the Internet, this is a system that translates a human-readable web address into a XOR address.</p>\r\n            <p>Public ID - chosen name for an account (e.g. alice or maidsafe). An account may register any number of Public IDs so long as they have not been registered previously.</p>\r\n            <p>Service name - the name of a service such as a website, email or chat app. So if Alice's website was called mysite the URL would be mysite.alice.</p>\r\n            <p>Type tag - allows apps to identify the type of data: 15001 Public ID; 15002 Service Name; 15003 Email ID; 15004 Email Archive.</p>\r\n            <p>Opportunistic Caching - automatic creation of more copies of popular data close to where it is being requested, so popular websites and other data feeds will actually speed up as they get more visitors, rather than slow down as they do on today's web.</p>\r\n        </div>\r\n        <p>Websites on the SAFE Network can be identified using URLs thus: safe://service_name.public_id (e.g. safe://mysite.alice). Working in a similar way to the familiar Internet Domain Name System (DNS), these human-readable addresses are translated into Network addresses on SAFE using the Name Resolution System (NRS).</p>\r\n        <p>As well as the human readable SAFE URL provided by NRS, files stored on the Network can also be accessed via their XOR-URL (e.g. safe://a078516207e36aa2371e17750c93276446bdb4867c027035531b89430aa8d3ae2fa4dbb59). This URL is a base-32 encoding of the file&rsquo;s XOR address and (optionally) its MIME type allowing data to be stored and retrieved by applications without reference to the storer&rsquo;s account (see Chapter 11).</p>\r\n        <p>&nbsp;</p>\r\n        <h3>Tell me more...</h3>\r\n        <p>&nbsp;</p>\r\n        <p><a title=\"base 32\" href=\"https://safenetforum.org/t/an-overview-of-data-types-on-the-safe-network/29845\" target=\"_blank\" rel=\"noopener noreferrer\" >An Overview of Data Types on the SAFE Network (MaidSafe blog post)</a></p>\r\n\r\n        <p><a title=\"md\" href=\"https://github.com/maidsafe/rfcs/blob/master/text/0047-mutable-data/0047-mutable-data.md\" target=\"_blank\" rel=\"noopener noreferrer\" >MutableData (MaidSafe RFC)</a></p>\r\n        <p><a title=\"md\" href=\"https://github.com/maidsafe/rfcs/blob/d42c24db6ddfe58f14b347a5664710e493262ce9/text/0052-RDF-for-public-name-resolution/0052-RDF-for-public-name-resolution.md\" target=\"_blank\" rel=\"noopener noreferrer\" >RDF for the Public Name Resolution System (MaidSafe RFC)</a></p>\r\n        <p><a title=\"aod\" href=\"https://github.com/maidsafe/safe-nd/blob/master/src/append_only_data.rs\" target=\"_blank\" rel=\"noopener noreferrer\" >AppendOnlyData (Github)</a></p>\r\n        <p><a title=\"cache\" href=\"https://maidsafe.net/features.htm\" target=\"_blank\" rel=\"noopener noreferrer\" >Distributed network with opportunistic data caching (MaidSafe)</a></p>\r\n        <p><a title=\"wayback\" href=\"https://web.archive.org/\" target=\"_blank\" rel=\"noopener noreferrer\" >Internet Archive Wayback Machine</a></p>\r\n        <p><a title=\"safe_app\" href=\"https://docs.maidsafe.net/safe_app_nodejs/#nfs\" target=\"_blank\" rel=\"noopener noreferrer\" >Maidsafe NFS API documentation</a></p>\r\n        <p><a title=\"zimmermann\" href=\"https://github.com/maidsafe/rfcs/blob/357384147ae005e4061079b27a30f43cf379fda5/text/0000-xor-urls/0000-xor-urls.md\" target=\"_blank\" rel=\"noopener noreferrer\" >XOR-URLs (MaidSafe RFC)</a></p>\r\n        <p><a title=\"base 32\" href=\"https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt\" target=\"_blank\" rel=\"noopener noreferrer\" >Human-oriented base-32 encoding (O'Whielacronx)</a></p>\r\n\r\n     </div>   \r\n);\r\n\r\nexport default component;","import React from 'react';\r\nimport xor_url from '../images/xor_url.PNG';\r\nimport api_flow_revised from '../images/api_flow_revised.PNG';\r\n\r\n\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch11'>11. The SAFE API</h2>\r\n        <p>The SAFE API is used by developers to interact directly with the SAFE Network. It is available to use in JavaScript, Node.js, Java and C#. Apps connecting to the SAFE Network are granted different levels of access to data through the API depending on whether they are authorized or not. Apps that are not authorized can only access public data, such as websites. Authorized Apps can access the full range of network functionality.</p>\r\n\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img className=\"Img1\" src={api_flow_revised} alt=\"API-Flow\" align=\"center\" />\r\n        </div>\r\n\r\n        <p>The SAFE Network has default containers in which certain types of files are stored. For example, _documents is used to store document-related data; _downloads is the container for downloaded content; _music is the place to store music files, and so on. Two special cases are _public - to store unencrypted data (the container is encrypted even if its contents are not), and _publicNames - to store Public IDs which can be looked up for public information.</p>\r\n        <p>Application development for the SAFE Network is no different from standard practice. There are safe_app libraries based on the platform the application is being built on. As mentioned, Node.js, Javascript, Java and C# are best supported at present. Web applications can be built using the DOM API of the SAFE Browser and there are libraries for Android and iOS.</p>\r\n\r\n        <h3>Authorization</h3>\r\n        <p>Applications need to be authorized before they can access data on the Network. In a similar way to the familiar OAuth process, the application sends a request using the library for authorization. When the authorization is approved by the user, the application receives a token which is used to connect to the SAFE Network. Authorization is achieved via an application call to the Authenticator, which is currently bundled with the SAFE Browser.</p>\r\n\r\n        <p>Authorization is fine grained. An application can create its own container and request access to default containers or other applications&rsquo; containers through the authorization request. READ, WRITE, UPDATE, DELETE, MANAGE permissions can be requested for every container. The API features many methods for allowing apps to interact with and deploy MutableData, AppendOnlyData and ImmutableData types (see Chapter 10) and to write and retrieve data from the network.</p>\r\n        <h3>CipherOpt and Crypto APIs</h3>\r\n        <p>The safe_app library also provides crypto API functions. The safeCipherOpt API provides functions to create different encryption options to be applied while storing the data in the network. Sign key handling APIs were a work in progress at the time of writing.</p>\r\n        <p>There are three types of CipherOpts:</p>\r\n        <ul>\r\n            <li>Plain - Data will not be encrypted.</li>\r\n            <li>Symmetric - Data is encrypted with a symmetric key.</li>\r\n            <li>Asymmetric - Data is encrypted using a key pair.</li>\r\n        </ul>\r\n\r\n        <p>The safeCrypto API provides handy cryptographic functions, including hashing and generating key pairs.</p>\r\n        <h3>DOM API</h3>\r\n        <p>A web application can communicate with the SAFE Network and Authenticator by interacting\r\n        directly with the SAFE Browser&rsquo;s DOM API, i.e. window.safe* functions.</p>\r\n\r\n        <p>This API is very similar to the Node.js API, the main difference being that the web application receives handles for each of the objects that are instantiated when interacting with the API, e.g. SAFEApp and MutableData instances. The web app is required to release the handles provided by calling a specific &lsquo;free&rsquo; function on each of the tokens received.</p>\r\n        <h3>Support for XOR-URLs:</h3>\r\n        <p>The DOM API also allows applications to link or reference any MutableData/ImmutableData on the Network using its XOR-URL. This is a URL based on the file&rsquo;s XOR location on the Network which also contains information about the file&rsquo;s mime-type so the SAFE Browser can fetch a file (say an image) and render it as usual.</p>\r\n        <p>As shown in the screenshot below, the SAFE Browser is capable of decoding the XOR-URL to extract the location of the content, content type (if the MIME type is also encoded in the XOR-URL), fetch it, and render it accordingly as it does it with any publicName-URL (i.e. the URLs which make use of the SAFE DNS system):</p>\r\n        <div className=\"Full-width-pic\" align=\"center\">\r\n\r\n            <img src={xor_url} alt=\"XOR-URL\" width=\"100%\" align=\"center\" />\r\n        </div>\r\n\r\n        <p><em>Fetching a page using its XOR-URL</em></p>\r\n        <h3>WebIDs, RDF and SOLID</h3>\r\n        <p>The SAFE DOM API safe_app_nodejs supports WebIDs. These allow users to identify themselves to applications and pass information (for example the location of an inbox) using just a URL. A user may create multiple IDs for different purposes.</p>\r\n        <p>There is also support for the semantic web&rsquo;s data exchange model Resource Description Framework (RDF) and WebIDs are stored as RDF documents. Supporting RDF makes SAFE compatible with Tim Berners-Lee&rsquo;s SOLID project which allows users to store their own personal data in &lsquo;pods&rsquo; independently of the applications that use it. Many apps developed for SOLID should be easily ported to SAFE, and vice versa, and there is potential for the SAFE Network to operate as a highly secure platform for pods.</p>\r\n        <h3>Tell me more...</h3>\r\n        <p><a title=\"safe_app_nodejs \" href=\"http://docs.maidsafe.net/safe_app_nodejs \" target=\"_blank\" rel=\"noopener noreferrer\" >SAFE Network Node.js API</a></p>\r\n        <p><a title=\"cryptointerface\" href=\"https://docs.maidsafe.net/safe_app_nodejs/cryptointerface\" target=\"_blank\" rel=\"noopener noreferrer\" >Crypto API</a></p>\r\n        <p><a title=\"cipheroptinterface\" href=\"https://docs.maidsafe.net/safe_app_nodejs/cipheroptinterface\" target=\"_blank\" rel=\"noopener noreferrer\" >CipherOpt API</a></p>\r\n        <p><a title=\"Auth flow\" href=\"https://github.com/maidsafe/rfcs/blob/master/text/0046-new-auth-flow/0046-new-auth-flow.md\" target=\"_blank\" rel=\"noopener noreferrer\" >New Auth Flow (MaidSafe RFC)</a></p>\r\n        <p><a title=\"async-safe-core\" href=\"https://github.com/maidsafe/rfcs/blob/master/text/0043-async-safe-core/0043-async-safe-core.md\" target=\"_blank\" rel=\"noopener noreferrer\" >Async safe_core (MaidSafe RFC)</a></p>\r\n        <p><a title=\"Safe Authenticator Mobile\" href=\"https://github.com/maidsafe/safe-authenticator-mobile\" target=\"_blank\" rel=\"noopener noreferrer\" >Safe Authenticator Mobile (Github)</a></p>\r\n        <p><a title=\"webids\" href=\"https://medium.com/safenetwork/an-overview-of-webids-and-rdf-data-use-on-safe-a1fa4a319bd5\" target=\"_blank\" rel=\"noopener noreferrer\" >An overview of WebIds and RDF data use on SAFE (Josh Wilson).</a></p>\r\n        <p><a title=\"rdf\" href=\"https://www.w3.org/RDF/\" target=\"_blank\" rel=\"noopener noreferrer\" >Resource Description Framework (RDF) &ndash; (W3 documentation)</a></p>\r\n        <p><a title=\"Playing it SAFE with RDF\" href=\"https://forum.safedev.org/t/playing-it-safe-with-rdf/1889\" target=\"_blank\" rel=\"noopener noreferrer\" >Playing it SAFE with RDF</a></p>\r\n        </div>\r\n);\r\n\r\nexport default component;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst component = () => (\r\n\r\n    <div className='chapter'>\r\n        <h2 id='ch12'>12. How SAFE Network defends against common types of cyberattack</h2>\r\n        <p>SAFE Network has an interlocking set of features, each covering the others&rsquo; vulnerabilities. This means that data security on SAFE is maximized. While 100 percent security is impossible, this strength-in-depth means that the sort of attacks common on the current web will be much harder to carry out on SAFE.</p>\r\n        <h3><strong>Features</strong></h3>\r\n        <p><em>Random address allocation</em><strong> &ndash; </strong>a new node (Vault) joining the Network cannot set its own address and thus cannot decide which Section it joins or which data it will be looking after. This prevents an attacker from being able to target a particular Section to add bad nodes. On a random distribution, the attacker would need to control approximately a third of all nodes to launch such an attack (see Chapter 4).</p>\r\n        <p><em>Nodes are added only as needed -</em> Each Group only accepts a Vault if needed, meaning an attacker might have to wait a very long time to get his or her Vault accepted. Even after that, a new Vault will be moved between Sections before it can become an Elder (see Chapter 5).</p>\r\n        <p><em>Node ageing</em> - only nodes that have proved their worth over time (Elders) are allowed to vote on the validity of events in a Section. Vaults that do not pull their weight or act as they should will be expelled and/or their Node Age reset to a lower value (see Chapter 5).</p>\r\n        <p><em>Churn</em> - Nodes are constantly joining or leaving Sections. Membership is fluid.</p>\r\n        <p><em>Encryption</em> - All data on the SAFE Network is protected by several layers of encryption. Even public data is encrypted (in this case the keys are shared to allow others to decrypt it &ndash; see Chapter 6).</p>\r\n        <p><em>Self-Encryption</em> - files stored on the Network are broken into chunks with each chunk encrypted using its own hash and the hashes of the two previous chunks. These chunks are stored at geographically random locations (the XOR location being the hash of the encrypted chunk) with a number of copies retained for redundancy. Without a Data Map, the chunks cannot be retrieved and decrypted. (Chapter 6).</p>\r\n        <p><em>XOR Networking</em> - Randomizes the geographical distribution of the chunks. Only someone in possession of the Data Map (i.e. the data owner) can find the chunks and piece them together again to recreate the file. An attacker trying to fake a chunk could not do so as its hash - and therefore its address on the Network - would be different. It could not be used to create a corrupted version of the file (see Chapter 5).</p>\r\n        <p><em>Self-Authentication</em> - A user can create an account and log into the decentralized SAFE Network securely and anonymously without requiring any central server to mediate the login process or any trusted third party to store and manage users&rsquo; credentials (see Chapter 3).</p>\r\n        <p><em>Proxy Node</em> - To retain anonymity, the identity of a client connecting to the Network must be obfuscated from the nodes that comprise it. For this reason connections between clients and vaults in the SAFE Network always occur via a Proxy Node (see Chapter 4).</p>\r\n        <p><em>Disjoint Sections</em> - Addresses on the SAFE Network are grouped into Sections with each Sectionlooked after by a Group of nodes. Those nodes know everything about the Section for which they are responsible but very little about the rest of the Network. Moreover, the membership of a Section is constantly changing and they will frequently split or merge. So even if an attacker could control a Section his potential for damage would be limited (see Chapter 5).</p>\r\n        <p><em>Data Chain</em> - All events occurring in a Section are stored in a ledger - a Data Chain. All Section members hold a copy. Elements of it are also shared with nearby Groups (in XOR terms). Because Sections can audit their neighbours, it becomes harder for an attacker to benefit (see Chapter 4).</p>\r\n        <p><em>PARSEC</em> - The PARSEC consensus algorithm provides a quick and efficient way to be sure of the true order of events happening within a section, and by extension in the whole Network, even when the section is changing rapidly with nodes leaving and joining. Malice detection features are built in to identify nodes that are acting abnormally and eject them (see Chapter 7).</p>\r\n        <h3><strong>Defence against common attacks</strong></h3>\r\n        <p><em>Sybil attack</em> - In a Sybil attack, the attacker subverts the reputation system of a peer-to-peer network by creating a large number of pseudonymous identities, using them to gain a disproportionately large influence.</p>\r\n        <p>An attacker owning a large number of nodes (Vaults) could potentially control individual Sections and block actions happening to data in those Sections (GET, PUT, transfer Safecoin). However, they would need to control more than a third of the Elders, and remember they cannot choose the Sections they join. Even then, the attacker would only have influence over the fraction of data controlled by the Group it is in (not the whole Network). Also, disrupting an individual&rsquo;s data would be impossible &ndash; the attacker cannot know where it is stored.</p>\r\n        <p>Someone with enough Vaults could of course bring the Network down (for example by suddenly turning off all their Vaults). But this gets harder very quickly as the Network grows larger. A combination of Node Ageing, Data Chains, churn, rules on joining Sections and the splitting and merging of Sections would make this massively more difficult (and very expensive) on a large network.</p>\r\n        <p>In addition, PARSEC will still be able to ensure proper consensus unless more than a third of the Vaults are malicious, and it has Malice Detection tests to identify misbehaving nodes.</p>\r\n        <p><em>Phishing, keylogging etc</em> - these attacks are feasible as the Network cannot protect endpoints. But such an attack would only compromise the user&rsquo;s own data (and that others have allowed the user to see). Using such a compromise as a springboard for a wider attack on a database or whatever would not be possible. This would be of dubious value to an attacker.</p>\r\n        <p><em>Man in </em><em>the Middle attacks</em> - MitM attacks rely on data being unencrypted or the victim&rsquo;s browser accepting the attacker's certificate instead of the website&rsquo;s certificate. They will not work on SAFE.</p>\r\n        <p><em>DDoS</em> - exceptionally difficult as there is no single point to attack. The Network will simply reroute around any nodes that are taken down.</p>\r\n        <p><em>Quantum computing</em> - The encryption used on SAFE is &lsquo;quantum resistant&rsquo; (but not &lsquo;quantum proof&rsquo; of course). But the volume of encrypted packets means that there could only be targeted attempt at decryption, and decentralization makes such targeting difficult.</p>\r\n        <p><em>Ransomware</em> &ndash;Files are stored in immutable data and cannot be changed, so ransomware could not encrypt it, but it could potentially delete Data Maps or hide them, making data inaccessible.</p>\r\n        <h3>Tell me more&hellip;</h3>\r\n        <p><a href=\"https://github.com/maidsafe/rfcs/blob/f88b55806fcc56876bc34649101c2869b780a247/text/0000-transparent-malice_handling_in_parsec/0000-transparent-malice_handling_in_parsec.md\">Malice handling in PARSEC.</a></p> \r\n        </div>\r\n);\r\n\r\nexport default component;","\r\nimport React from 'react';\r\n\r\n\r\n\r\n\r\nconst component = () => (\r\n    <div>\r\n        <h2 id='ch13'>13. The promise of the SAFE Network</h2>\r\n\r\n\r\n\r\n        <p>The SAFE Network is still in development. While many features and functionalities have already proven themselves under test conditions others, including Safecoin, are still to come.&nbsp; As with any cutting-edge experimental technology, the proof of the pudding is in the eating. But let&rsquo;s assume for a moment that the Network is successful and is widely adopted for various use cases including Internet browsing, IoT connectivity, data security, personal information management, medical records and more.</p>\r\n\r\n        <p>What would that world look like? First, most cyber attack strategies deployed today would be dead in the water. DDoS would not work as the Network would simply route around the affected nodes. Viruses and malware would be extremely limited in their depth of penetration. Ransomware would not raise a single dollar. Cyber-kinetic attacks aimed at disabling national infrastructure or taking control of a driverless car would be extremely hard to pull off. Medical records and other personal data would be ours and ours alone, to share as we see fit. For users there can be a single sign-on to multiple services. XOR networking with opportunistic caching promises faster speeds, data storage should be extremely cheap and the Network will offer high levels of availability. For developers having a single storage architecture to address has the potential to simplify the systems programmer&rsquo;s job. And data deduplication would allow for both simplicity and resource savings.</p>\r\n\r\n\r\n\r\n        <div class=\"Pullquote\">\"There would be a rebalancing of power from the data-haves to the data have-nots\"</div>\r\n\r\n\r\n\r\n        <p>The Internet giants of today would no longer be able to harvest our data without our say so, nor could government spooks eavesdrop over their shoulders. There would be a rebalancing of power from the data-haves to the data have-nots. Censorship would be impossible and data could not be erased. Because the cost of entry will be low and access unrestricted, the ongoing net neutrality debate will end, and neutrality will have won the day.</p>\r\n\r\n        <p>People in places with poor or restricted access to information will have those blockers lifted. Some may even make a decent living earning Safecoin. New business models based on consent would spring up in a world where data storage and networking and eventually compute is a commodity, and the world of information will be a much more level playing field.</p>\r\n\r\n        <p>Isn&rsquo;t this all a bit idealistic? Well yes of course, but that&rsquo;s the nature of visions. Not everything will work as planned and we need to be hard-headed about that. Techno-utopianism is a dangerous thing. There are both predictable and unpredictable consequences of taking on the status quo, and indeed of deploying any new technology, and not all of them will be positive. Nevertheless, given where we are today, and where we are headed with the IoT, something like the SAFE Network is most definitely needed to redress the power imbalance and to secure the data-driven future.</p>\r\n\r\n        <h3>Roadmap</h3>\r\n\r\n        <p>As with all experimental research-driven projects the rate of progress is unpredictable, and MaidSafe avoid giving hard deadlines. However, there is a roadmap at <a href=\"https://safenetwork.tech/timeline/\">https://safenetwork.tech/timeline/</a> in which the next developments are laid out. The next Alpha, SAFE Fleming, will allow anyone with a computer and an internet connection to join the Network and will enable fully encrypted transient data to flow across the Network. After that SAFE Maxwell will reintroduce user-run Vaults facilitating a much broader range of decentralized apps and use cases.</p>\r\n\r\n        <h2>About MaidSafe</h2>\r\n\r\n\r\n\r\n        <p>MaidSafe is a company founded by David Irvine in 2006 with a mission to provide security and privacy for everyone by building a better digital world. This new platform is the SAFE Network, which is the world&rsquo;s first autonomous and decentralized data network. The Network is made up of the unused hard drive space, processing power and bandwidth of its users. The SAFE Network will include storage, peer-to-peer communications, transactions, Internet functionality and a wide variety of apps to name a few of its features. This paper was written and produced by members of the SAFE Network Forum independently of MaidSafe.&nbsp;</p>\r\n\r\n        <p>Join the debate at <a href=\"https://safenetforum.org/\">https://safenetforum.org</a>&nbsp;</p>\r\n\r\n        <p>Website: <a href=\"http://www.safenetwork.tech/\">www.safenetwork.tech</a></p>\r\n\r\n        <p>Developer forum: <a href=\"http://www.safedev.org/\">forum.safedev.org</a></p>\r\n\r\n        <p>Developer hub: <a href=\"https://hub.safedev.org/\">https://hub.safedev.org/</a></p>\r\n\r\n        <p>Github: <a href=\"https://github.com/maidsafe\">https://github.com/maidsafe</a></p>\r\n\r\n        <p>Twitter: <a href=\"https://twitter.com/maidsafe\">https://twitter.com/maidsafe</a></p>\r\n\r\n        <p>Reddit: <a href=\"https://reddit.com/r/safenetwork\">https://reddit.com/r/safenetwork</a></p>\r\n\r\n        <p>Telegram: <a href=\"https://t.me/safenetwork\">https://t.me/safenetwork</a></p>\r\n</div>\r\n);\r\n\r\nexport default component;","import React from 'react';\r\n\r\nconst component = (prop) => (\r\n    <div className='header' align={ 'center' }>\r\n        <h1>The SAFE Network Primer</h1>\r\n<p><strong>An introductory guide to the world's first fully autonomous data and communications network</strong></p>\r\n        <p>Last update: October 2019</p>\r\n        <hr />\r\n\r\n     </div>\r\n);\r\n\r\nexport default component;","import React from 'react';\r\nfunction Topbar(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"Topbar\" style={{ backgroundColor: props.bgcol, height: \"10px\" }} />\r\n         \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Topbar;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { Intro, Chap1, Chap2, Chap3 } from './pages';\r\nimport Chap4 from './pages/Chap4';\r\nimport Chap5 from './pages/Chap5';\r\nimport Chap6 from './pages/Chap6';\r\nimport Chap7 from './pages/Chap7';\r\nimport Chap8 from './pages/Chap8';\r\nimport Chap9 from './pages/Chap9';\r\nimport Chap10 from './pages/Chap10';\r\nimport Chap11 from './pages/Chap11';\r\nimport Chap12 from './pages/Chap12';\r\nimport Chap13 from './pages/Chap13';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Topbar from './Topbar';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n     \r\n        <div className=\"App\">\r\n\r\n        \r\n          <Header />\r\n          <Intro />\r\n          <Topbar bgcol=\"#1f3a80\" word=\"\" />  \r\n          <Chap1 />\r\n          <Topbar bgcol=\"#1f3a70\" word=\"\" />  \r\n          <Chap2 />\r\n          <Topbar bgcol=\"#1f3a60\" word=\"\" />  \r\n          <Chap3 />\r\n          <Topbar bgcol=\"#1f3a50\" word=\"\" />          \r\n         <Chap4 />\r\n         <Topbar bgcol=\"#1f3a40\" word=\"\" />         \r\n         <Chap5 />\r\n         <Topbar bgcol=\"#1f3a30\" word=\"\" />\r\n         <Chap6 />\r\n         <Topbar bgcol=\"#1f3a20\" word=\"\" />\r\n         <Chap7 />\r\n         <Topbar bgcol=\"#1f3a10\" word=\"\" />\r\n         <Chap8 />\r\n         <Topbar bgcol=\"#1f3b90\" word=\"\" />\r\n         <Chap9 />\r\n         <Topbar bgcol=\"#1f3b80\" word=\"\" />\r\n         <Chap10 />\r\n         <Topbar bgcol=\"#1f3b70\" word=\"\" />\r\n         <Chap11 />\r\n         <Topbar bgcol=\"#1f3b60\" word=\"\" />\r\n         <Chap12 />\r\n         <Topbar bgcol=\"#1f3b50\" word=\"\" />\r\n         <Chap13 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}